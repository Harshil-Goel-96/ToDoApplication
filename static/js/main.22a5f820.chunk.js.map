{"version":3,"sources":["DisplayItems.js","App.js","serviceWorker.js","index.js"],"names":["DisplayItems","listitems","this","props","itemArray","map","litem","key","type","value","text","onChange","e","edit","target","onClick","delete","icon","faTrash","className","duration","easing","React","Component","App","addItem","inputElement","item","Date","now","state","data","push","setState","preventDefault","deleteItem","finalItems","filter","editItem","edititems","onSubmit","placeholder","ref","ref_node","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"wRAuCeA,E,uKApBF,IAAD,OAGAC,EAAYC,KAAKC,MAAMC,UAAUC,KAAI,SAACC,GAEtC,OAAO,wBAAIC,IAAKD,EAAMC,KAAK,2BAAOC,KAAK,OAAOC,MAAOH,EAAMI,KAAMC,SAAU,SAACC,GAAD,OAAO,EAAKT,MAAMU,KAAKD,EAAEE,OAAOL,MAAMH,EAAMC,QAAQ,0BAAMQ,QAAS,WAAO,EAAKZ,MAAMa,OAAOV,EAAMC,OAAO,kBAAC,IAAD,CAAiBU,KAAMC,WAG/M,OAEI,wBAAIC,UAAU,WACV,kBAAC,IAAD,CAAUC,SAAU,IAAKC,OAAO,WAC/BpB,Q,GAzBUqB,IAAMC,WCmElBC,G,wDAlEb,aAAc,IAAD,8BACX,gBAMJC,QAAU,SAACb,GACX,GAA+B,KAA5B,EAAKc,aAAajB,MACrB,CACE,IAAIkB,EAAO,CACTjB,KAAO,EAAKgB,aAAajB,MACzBF,IAAMqB,KAAKC,OAGb,EAAKC,MAAMC,KAAKC,KAAKL,GACrB,EAAKM,SAAS,CAACF,KAAK,EAAKD,MAAMC,OAE/B,EAAKL,aAAajB,MAAQ,GAG5BG,EAAEsB,kBArBa,EAwBfC,WAAa,SAAC5B,GAEZ,IAAI6B,EAAa,EAAKN,MAAMC,KAAKM,QAAO,SAACV,GAAU,OAAQA,EAAKpB,MAAQA,KAExE,EAAK0B,SAAS,CAACF,KAAKK,KA5BP,EAgCfE,SAAW,SAAC5B,EAAKH,GAEf,IAAIgC,EAAY,EAAKT,MAAMC,KAAK1B,KAAI,SAACsB,GAMnC,OAJGA,EAAKpB,MAAQA,IAEdoB,EAAKjB,KAAOA,GAEPiB,KAIT,EAAKM,SAAS,CAACF,KAAKQ,KA1ClB,EAAKT,MAAQ,CACXC,KAAO,IAHE,E,qDAgDJ,IAAD,OACN,OACE,yBAAKZ,UAAU,SACb,yBAAKA,UAAU,UACf,0BAAMqB,SAAYtC,KAAKuB,SACrB,2BAAOjB,KAAK,OAAOiC,YAAY,WAAWC,IAAK,SAACC,GAAc,EAAKjB,aAAeiB,KAClF,4BAAQnC,KAAK,UAAb,SAIJ,kBAAC,EAAD,CAAcJ,UAAWF,KAAK4B,MAAMC,KAAMf,OAAQd,KAAKiC,WAAYtB,KAAMX,KAAKoC,gB,GA5DlEhB,IAAMC,YCOJqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEL,kBAAC,EAAD,MAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.22a5f820.chunk.js","sourcesContent":["import React from 'react';\r\nimport FlipMove from 'react-flip-move';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\n\r\nclass DisplayItems extends React.Component{\r\n\r\n//constructor(props)\r\n//{\r\n//  super(props);\r\n// this.delete = this.delete.bind(this);\r\n//}\r\n\r\n    //delete(key)\r\n    // {\r\n    //     this.props.delete(key);\r\n    // }\r\n    \r\n    render(){\r\n       \r\n       \r\n        var listitems = this.props.itemArray.map((litem) => {\r\n\r\n            return(<li key={litem.key}><input type=\"text\" value={litem.text} onChange={(e) => this.props.edit(e.target.value,litem.key)} /><span onClick={() => {this.props.delete(litem.key)}}><FontAwesomeIcon icon={faTrash} /></span></li>);\r\n         });\r\n         \r\n        return(\r\n            \r\n            <ul className=\"theList\">\r\n                <FlipMove duration={250} easing=\"ease-in\">\r\n                {listitems}\r\n                </FlipMove>\r\n            </ul>\r\n            \r\n        );\r\n    }\r\n}\r\n\r\nexport default DisplayItems;","import React from 'react';\nimport DisplayItems from './DisplayItems';\nimport './App.css';\n\n\nclass App extends React.Component {\n\n  constructor(){\n    super();\n    this.state = {\n      data : []\n    };\n  }\n\naddItem = (e) =>{\nif(this.inputElement.value !== \"\")\n{\n  var item = {\n    text : this.inputElement.value,\n    key : Date.now()\n  };\n\n  this.state.data.push(item);\n  this.setState({data:this.state.data});\n\n  this.inputElement.value = \"\";\n}\n//console.log(this.state.data);\ne.preventDefault();\n}\n\ndeleteItem = (key) => {\n\n  var finalItems = this.state.data.filter((item) => {return (item.key !== key)});\n  //console.log(finalItems);\n  this.setState({data:finalItems});\n  \n}\n\neditItem = (text,key) => {\n\n  var edititems = this.state.data.map((item) => {\n\n    if(item.key === key)\n    {\n      item.text = text;\n    }\n    return item;\n\n  });\n\n  this.setState({data:edititems});\n\n}\n\n  render(){\n    return (\n      <div className=\"myApp\">\n        <div className=\"header\">\n        <form onSubmit = {this.addItem}>\n          <input type=\"text\" placeholder=\"ToDo....\" ref={(ref_node) => {this.inputElement = ref_node}} />\n          <button type=\"submit\">ADD</button>\n        </form>\n        </div>\n\n      <DisplayItems itemArray={this.state.data} delete={this.deleteItem} edit={this.editItem} />\n      \n      </div>\n    \n  );\n  \n}\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  \n    <App />\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}